public string NN is VBZ el NN ignored VBN public string is el ignored root ROOT ignored auxpass ignored is nsubjpass ignored el
public string NN is VBZ scripting VBG invalid JJ public string is scripting invalid root ROOT scripting aux scripting is xcomp scripting invalid
public string NN is VBZ xml NN public string is xml root ROOT xml cop xml is
boolean set VBN value NN object NN value NN scriptable JJ owner NN scriptable JJ start NN boolean set value root ROOT set dobj set value object value scriptable owner scriptable start
public static object NN set VBN object NN index NN object NN obj NN double dbl NN index NN object NN value NN context NN cx NN public static object set object index root ROOT set compound index object dobj set index object obj double dbl index root ROOT index compound index dbl object value context cx
public byte get VB map VB context NN name NN public byte get map context name root ROOT map aux map get compound name context dobj map name
public boolean get VB param NN and CC var NN const NN public boolean get param and var const root ROOT get compound const param cc param and conj and param var compound const var dobj get const
protected void check NN protected void check
protected void check NN expired VBD protected void check expired root ROOT expired nsubj expired check
private void check NN popup NN mouse NN event NN e SYM private void check popup root ROOT popup compound popup check mouse event root ROOT event compound event mouse e
public void has VBZ should MD be VB false JJ for IN a DT new JJ array NN public void has should be false for a new array root ROOT false aux false has aux false should cop false be case array for det array a amod array new nmod for false array
private void to TO exponential JJ format NN int first RB digit NN int dec NN point NN private void to exponential format root ROOT format case format to amod format exponential int first digit root ROOT digit advmod digit first int dec point root ROOT point compound point dec
final int get VB attributes NNS int id NN final int get attributes root ROOT get dobj get attributes int id
public int get VB attributes NNS string NN name NN public int get attributes root ROOT get dobj get attributes string name
private byte name NN null JJ private byte name null
private static final list NN string NN empty JJ string NN collections NNS empty JJ list NN private static final list string empty string root ROOT string amod string empty collections empty list root ROOT list compound list collections amod list empty
string NN is VBZ strict JJ org NN apache NN maven NN artifact NN repository JJ metadata NN io NN is VBZ strict JJ string is strict root ROOT strict cop strict is org apache maven artifact repository metadata io is strict root ROOT strict compound io org compound io apache compound io maven compound io artifact amod io repository compound io metadata nsubj strict io cop strict is
private short its PRP$ flags NNS private short its flags root ROOT flags nmod poss flags its
private final boolean classes NNS private final boolean classes
private final boolean methods NNS private final boolean methods
private int successes NNS private int successes
private final string NN args NNS private final string args
public int is VBZ valid JJ public int is valid root ROOT valid cop valid is
public dimension NN set VBN breadth NN dimension NN target NN int source NN public dimension set breadth root ROOT set dobj set breadth dimension target int source
public dimension NN set VBN length NN dimension NN target NN dimension NN source NN public dimension set length root ROOT set dobj set length dimension target dimension source
public dimension NN set VBN length NN dimension NN target NN int source NN public dimension set length root ROOT set dobj set length dimension target int source
public list NN get VB expansion NN public list get expansion root ROOT get dobj get expansion
public void check NN collision NN string NN before IN string NN after IN public void check collision root ROOT collision compound collision check string before string after
protected void get VB method NN bodies NNS compilation NN unit NN declaration NN unit NN int place NN protected void get method bodies root ROOT get compound bodies method dobj get bodies compilation unit declaration root ROOT declaration compound declaration compilation compound declaration unit unit int place
public void is VBZ valid JJ object NN selection NN status NN info NN res NNS public void is valid root ROOT valid cop valid is object selection status info root ROOT info compound info status res
public void java NN to TO native JJ object NN object NN transfer NN data NNS transfer NN data NNS public void java to native root ROOT java case native to nmod to java native object object transfer data root ROOT data compound data transfer transfer data root ROOT data compound data transfer
public boolean get VB stats NNS public boolean get stats root ROOT get dobj get stats
saves the current enable disable state of the given control and its descendents in the returned object the controls are all disabled param w the control return an object capturing the enable disable state public static control NN enable VBP state NN disable VB control NN w NN saves the current enable disable state of the given control root ROOT saves det state the amod state current amod state enable amod state disable dobj saves state case control of det control the amod control given nmod of state control and its descendents in the returned object the controls root ROOT controls cc controls and nmod poss descendents its conj and controls descendents case object in det object the amod object returned nmod in descendents object det controls the are all disabled root ROOT disabled cop disabled are det disabled all param w the control root ROOT w nsubj w param det control the dobj w control return an object capturing the enable disable state root ROOT return det object an dobj return object acl object capturing det state the amod state enable amod state disable dobj capturing state public static control enable state root ROOT enable nsubj enable control dobj enable state disable control w enable disable ANTONYM ANTONYM enable disabled ANTONYM ANTONYM given control ANTONYM ANTONYM given controls ANTONYM ANTONYM saves return ANTONYM ANTONYM saves returned ANTONYM ANTONYM
returns true if this listener has a target for a back navigation only one listener needs to a back navigation only one listener needs to return true for the back button to be enabled public boolean is VBZ navigate VB forward RB enabled VBD returns true if this listener has a target for root ROOT returns amod returns true mark has if det listener this nsubj has listener advcl if true has det target a dobj has target acl target for a back navigation only one listener needs to root ROOT navigation det navigation a amod navigation back advmod one only nummod listener one nsubj needs listener acl relcl navigation needs nmod needs to a back navigation only one listener needs to root ROOT navigation det navigation a amod navigation back advmod one only nummod listener one nsubj needs listener acl relcl navigation needs nmod needs to return true for the back button to be enabled root ROOT return amod return true mark enabled for det button the amod button back nsubjpass enabled button mark enabled to auxpass enabled be advcl to true enabled public boolean is navigate forward enabled root ROOT navigate aux navigate is advmod navigate forward dep navigate enabled has needs ANTONYM ANTONYM has return ANTONYM ANTONYM returns has ANTONYM ANTONYM
vector NN target NN vector target
int is VBZ reached VBN int is reached root ROOT reached auxpass reached is
m NN association NN end NN start NN null JJ m association end root ROOT end compound end m compound end association start null
configuration default exclude pattern ie href action frame src ie href action frame src ie href action frame src public final static string NN include VBP name NN default NN href NN action NN frame NN src NN configuration default exclude pattern root ROOT exclude compound default configuration nsubj exclude default dobj exclude pattern ie href action frame src root ROOT src compound src ie compound src href compound src action compound src frame ie href action frame src root ROOT src compound src ie compound src href compound src action compound src frame ie href action frame src root ROOT src compound src ie compound src href compound src action compound src frame public final static string include name default root ROOT include compound default name dobj include default href action frame src configuration frame ANTONYM ANTONYM configuration pattern ANTONYM ANTONYM exclude include ANTONYM ANTONYM frame name ANTONYM ANTONYM pattern frame ANTONYM ANTONYM pattern name ANTONYM ANTONYM
int references NNS int references
bool NN get VB sub JJ keys NNS c NN string NN list NN subkeys NNS returns NNS the DT list NN of IN sub NN keys NNS bool get sub keys root ROOT get amod keys sub dobj get keys c string list root ROOT list compound list c compound list string subkeys returns the list of sub keys list keys ANTONYM ANTONYM
public int get VB rows NNS public int get rows root ROOT get dobj get rows
private string NN types NNS private string types
public string NN get VB types NNS public string get types root ROOT get dobj get types
private double peak NN private double peak
private int nulls NNS private int nulls
public string NN is VBZ dependency NN resolution NN required VBN public string is dependency resolution required root ROOT required auxpass required is compound resolution dependency nsubjpass required resolution
returns a uuid unique for this member over all sessions if the member crashes and restarts the unique id will be different return byte public byte get VB unique JJ id NN returns a uuid unique for this member over all sessions root ROOT returns det unique a amod unique uuid dep returns unique case member for det member this nmod for unique member case sessions over det sessions all nmod over unique sessions if the member crashes and restarts the unique id will be different root ROOT different mark crashes if det member the nsubj crashes member nsubj restarts member csubj different crashes cc crashes and conj and crashes restarts csubj different restarts det id the amod id unique dobj restarts id aux different will cop different be return byte root ROOT byte compound byte return public byte get unique id root ROOT get amod id unique dobj get id all over ANTONYM ANTONYM unique different SYNONYM SYNONYM
public byte get VB command NN public byte get command root ROOT get dobj get command
protected transient byte map NN context NN name NN protected transient byte map context name root ROOT name compound name map compound name context
private static final list NN string NN empty JJ string NN collections NNS empty JJ list NN private static final list string empty string root ROOT string amod string empty collections empty list root ROOT list compound list collections amod list empty
public push NN builder NN set VBN header NN string NN name NN string NN value NN public push builder root ROOT builder compound builder push set header root ROOT set dobj set header string name string value
public v LS set VBN value NN v LS value NN public v set value root ROOT set dobj set value v value
public k NN set VBN key NN k NN key NN public k set key root ROOT set dobj set key k key k key ANTONYM ANTONYM
private static final string NN odt NN file NN private static final string NN odt NN file NN private static final string odt file root ROOT file compound file odt private static final string odt file root ROOT file compound file odt
private static final string NN odt NN file NN with IN metadata NN private static final string odt file with metadata root ROOT file compound file odt case metadata with nmod with file metadata
private static final string NN odt NN file NN with IN min NN text NN len NN private static final string odt file with min text len root ROOT file compound file odt case len with compound len min compound len text nmod with file len
private static final string NN pdf NN zip NN file NN private static final string pdf zip file root ROOT file compound file pdf compound file zip
private static final string NN pdf NN file NN private static final string pdf file root ROOT file compound file pdf
private static final list NN string NN odt NN file NN private static final list string odt file root ROOT file compound file odt
abstract builder NN k NN v LS set VBN configuration NN serializable JJ configuration NN configuration NN abstract builder k v set configuration root ROOT set dobj set configuration serializable configuration root ROOT configuration amod configuration serializable configuration k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN key JJ translation NN function NN simple JJ function NN k NN function NN abstract builder k v set key translation function root ROOT set amod function key compound function translation dobj set function simple function root ROOT function amod function simple k function k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN value NN translation NN function NN simple JJ function NN v LS function NN abstract builder k v set value translation function root ROOT set compound function value compound function translation dobj set function simple function root ROOT function amod function simple v function k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN key JJ type NN descriptor NN type NN descriptor NN k NN key JJ type NN descriptor NN abstract builder k v set key type descriptor root ROOT set amod descriptor key compound descriptor type dobj set descriptor type descriptor root ROOT descriptor compound descriptor type k key type descriptor root ROOT descriptor amod descriptor key compound descriptor type k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN value NN type NN descriptor NN type NN descriptor NN v LS value NN type NN descriptor NN abstract builder k v set value type descriptor root ROOT set compound descriptor value compound descriptor type dobj set descriptor type descriptor root ROOT descriptor compound descriptor type v value type descriptor root ROOT descriptor compound descriptor value compound descriptor type k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN input NN format NN class NN type NN descriptor NN input NN format NN class NN abstract builder k v set input format class root ROOT set compound class input compound class format dobj set class type descriptor root ROOT descriptor compound descriptor type input format class root ROOT class compound class input compound class format k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN input NN format NN key JJ class NN type NN descriptor NN input NN format NN key JJ class NN abstract builder k v set input format key class root ROOT set compound class input compound class format amod class key dobj set class type descriptor root ROOT descriptor compound descriptor type input format key class root ROOT class compound class input compound class format amod class key k v SYNONYM SYNONYM
abstract builder NN k NN v LS set VBN input NN format NN value NN class NN type NN descriptor NN input NN format NN value NN class NN abstract builder k v set input format value class root ROOT set compound class input compound class format compound class value dobj set class type descriptor root ROOT descriptor compound descriptor type input format value class root ROOT class compound class input compound class format compound class value k v SYNONYM SYNONYM
private table NN reference NN set VBN default NN project NN if IN absent JJ private table reference root ROOT reference compound reference table set default project if absent root ROOT project amod project set compound project default mark absent if dep project absent
abstract builder NN t NN set VBN max NN files NNS per IN bundle NN integer NN max NN files NNS per IN bundle NN abstract builder t set max files per bundle root ROOT set compound files max dobj set files case bundle per nmod per files bundle integer max files per bundle root ROOT files compound files max case bundle per nmod per files bundle
abstract builder NN t NN set NN method NN method NN method NN abstract builder t set method root ROOT method compound method set method method
private static final string NN gearpump NN serializers NNS gearpump NN serializers NNS private static final string gearpump serializers root ROOT serializers compound serializers gearpump gearpump serializers root ROOT serializers compound serializers gearpump
static final string NN expected VBN result NN static final string expected result root ROOT result amod result expected
protected static final list NN serializable JJ function NN instant NN instant NN identity NN immutable JJ list NN serializable JJ function NN instant NN instant NN of IN protected static final list serializable function root ROOT function amod function serializable instant instant identity immutable list root ROOT list amod list immutable serializable function root ROOT function amod function serializable instant instant of
called when a new or active window is now known to be active ensure that if it is new then it becomes active with itself as its only state address window void ensure VB window NN is VBZ active JJ w NN window NN called when a new or active window is now known to be active root ROOT called advmod known when det window a amod window new cc new or conj or new active amod window active nsubjpass known window nsubj xsubj active window auxpass known is advmod known now advcl called known mark active to cop active be xcomp known active ensure that if it is new then it becomes active with itself as its only state address root ROOT ensure mark becomes that mark new if nsubj new it cop new is advcl if becomes new advmod becomes then nsubj becomes it ccomp ensure becomes xcomp becomes active case itself with nmod with active itself case address as nmod poss address its amod address only compound address state nmod as becomes address window void ensure window is active root ROOT active csubj active ensure dobj ensure window cop active is w window is known ANTONYM ANTONYM known be ANTONYM ANTONYM
void ensure VB window NN exists VBZ w NN window NN void ensure window exists root ROOT exists csubj exists ensure dobj ensure window w window
private static final string NN proto NN extension NN hosts NNS proto NN extension NN hosts NNS private static final string proto extension hosts root ROOT hosts compound hosts proto compound hosts extension proto extension hosts root ROOT hosts compound hosts proto compound hosts extension
auto NN prefix NN terms NNS public static final int version NN auto NN prefix NN terms NNS auto prefix root ROOT prefix compound prefix auto terms public static final int version auto prefix terms root ROOT terms compound terms version compound terms auto compound terms prefix
final boolean any DT auto NN prefix NN terms NNS final boolean any auto prefix terms root ROOT terms det terms any compound terms auto compound terms prefix
private final terms NNS enum VBP with IN slice NN top NN private final terms enum with slice root ROOT enum nsubj enum terms case slice with nmod with enum slice top
minimum NN per IN dim NN values NNS packed JJ protected final byte min NN packed VBD value NN minimum per dim root ROOT dim case dim per values packed protected final byte min packed value root ROOT packed nsubj packed min dobj packed value
maximum NN per IN dim NN values NNS packed JJ protected final byte max NN packed VBD value NN maximum per dim root ROOT dim case dim per values packed protected final byte max packed value root ROOT packed nsubj packed max dobj packed value
final byte scratch NN final byte scratch
private final fixed VBN bit NN set NN result NN private final fixed bit set root ROOT set amod set fixed compound set bit result
protected list NN query NN node NN set VBN children NNS order NN list NN query NN node NN children NNS throws query NN node NN exception NN protected list query node root ROOT node compound node query set children order root ROOT set compound order children dobj set order list query node root ROOT node compound node query children throws query node exception root ROOT exception compound exception query compound exception node
protected final bit NN set NN is VBZ internal JJ edges NNS protected final bit set root ROOT set compound set bit is internal edges root ROOT edges cop edges is amod edges internal
private static final string NN is VBZ internal JJ key JJ name NN is VBZ internal JJ private static final string is internal key name root ROOT name cop name is amod name internal amod name key is internal root ROOT internal cop internal is is name ANTONYM ANTONYM internal private SYNONYM SYNONYM
private final static string NN creations NNS creations NNS private final static string creations creations
public long get VB clicks NNS public long get clicks root ROOT get dobj get clicks
private final int days NNS private final int days
public static final type NN records NNS new type NN public static final type records new type
validate that the partition exists on the cluster param topic partition partition to validate param store name name of the store the partition is for throws org apache kafka streams errors streams exception if partition doesn t exist void validate VB partition NN exists VBZ final topic NN partition NN topic NN partition NN final string NN store NN name NN validate that the partition exists on the cluster root ROOT validate mark exists that det partition the nsubj exists partition ccomp validate exists case cluster on det cluster the nmod on exists cluster param topic partition partition to validate root ROOT partition compound partition param compound partition topic compound partition partition mark validate to acl to partition validate param store name name of the store the partition is for root ROOT name compound name param compound name store compound name name case store of det store the nmod of name store det partition the nsubj for partition cop for is acl relcl store for throws org apache kafka streams errors streams exception if partition doesn t exist root ROOT throws advmod apache org amod exception apache compound exception kafka compound exception streams compound exception errors compound exception streams dobj throws exception mark exist if compound t partition compound t doesn nsubj exist t advcl if throws exist void validate partition exists root ROOT exists csubj exists validate dobj validate partition final topic partition root ROOT partition compound partition topic topic partition root ROOT partition compound partition topic final string store name root ROOT name compound name store name is ANTONYM ANTONYM name throws ANTONYM ANTONYM validate void ANTONYM ANTONYM
for each class file in the suite directory create a test file object for live connect the test class name needs to be the name of the class and the file path needs to be the full package name prepended with the java script keyword packages and without the class suffix java script keyword packages and without the class suffix public void get VB cases NNS test NN suite NN suite NN for each class file in the suite directory create a test file object root ROOT create case file for det file each compound file class nmod for create file case directory in det directory the compound directory suite nmod in file directory det object a compound object test compound object file dobj create object for live connect the test class name needs to be the name of the class root ROOT connect mark connect for nsubj connect live det name the compound name test compound name class nsubj needs name nsubj xsubj name name ccomp connect needs mark name to cop name be det name the xcomp needs name case class of det class the nmod of name class and the file path needs to be the full package name prepended with the root ROOT needs cc needs and det path the compound path file nsubj needs path nsubj xsubj name path mark name to cop name be det name the amod name full compound name package xcomp needs name acl name prepended case the with nmod with prepended the java script keyword packages and without the class suffix root ROOT packages compound packages java compound packages script compound packages keyword cc packages and case suffix without det suffix the compound suffix class conj and packages suffix java script keyword packages and without the class suffix root ROOT packages compound packages java compound packages script compound packages keyword cc packages and case suffix without det suffix the compound suffix class conj and packages suffix public void get cases root ROOT get dobj get cases test suite root ROOT suite compound suite test suite class path ANTONYM ANTONYM create name ANTONYM ANTONYM full void ANTONYM ANTONYM name be ANTONYM ANTONYM
file NN helper NN functions NNS file helper functions root ROOT functions compound functions helper
override NN public int get VB attributes NNS int index NN override public int get attributes root ROOT get dobj get attributes int index
private static object NN set VBN length NN property NN context NN cx NN scriptable JJ target NN long length NN private static object set length property root ROOT set compound property length dobj set property context cx scriptable target long length
fast storage for dense arrays sparse arrays will use the superclass s fast storage for dense arrays sparse arrays will use the superclass s hashtable storage scheme private object NN dense JJ fast storage for dense arrays sparse arrays will use the superclass s root ROOT use amod storage fast nsubj use storage case arrays for amod arrays dense nmod for use arrays amod arrays sparse nsubj use arrays aux use will det s the amod s superclass dobj use s fast storage for dense arrays sparse arrays will use the superclass s root ROOT use amod storage fast nsubj use storage case arrays for amod arrays dense nmod for use arrays amod arrays sparse nsubj use arrays aux use will det s the amod s superclass dobj use s hashtable storage scheme root ROOT scheme amod scheme hashtable compound scheme storage private object dense dense sparse ANTONYM ANTONYM fast dense ANTONYM ANTONYM
public string NN get VB flags NNS public string get flags root ROOT get dobj get flags
static void to TO source NN impl NN string NN prefix NN string NN uri NN string NN builder NN sb NN static void to source impl root ROOT source mark source to dobj source impl string prefix string uri string builder root ROOT builder compound builder string sb
public boolean get VB param NN and CC var NN const NN public boolean get param and var const root ROOT get compound const param cc param and conj and param var compound const var dobj get const
second JJ formatted VBN in IN most RBS recent JJ invocation NN private long previous JJ seconds NNS Long MIN value NN second formatted in most recent invocation private long previous seconds root ROOT seconds amod seconds previous Long MIN value second min ANTONYM ANTONYM
unbinds the named object removes the terminal atomic name in name unbinds the named object removes the terminal atomic name in name from the target context that named by all but the terminal atomic part of name p this method is idempotent it succeeds even if the terminal atomic this method is idempotent it succeeds even if the terminal atomic name is not bound in the target context but throws name not found exception if any of the intermediate contexts do not exist param name the name to bind may not be empty exception name not found exception if an intermediate context does not exist exception naming exception if a naming exception is encountered override NN public void unbind NN name NN name NN throws naming VBG exception NN unbinds the named object removes the terminal atomic name in name root ROOT unbinds det object the amod object named nsubj removes object acl relcl unbinds removes det name the amod name terminal amod name atomic dobj removes name case name in nmod in removes name unbinds the named object removes the terminal atomic name in name root ROOT unbinds det object the amod object named nsubj removes object acl relcl unbinds removes det name the amod name terminal amod name atomic dobj removes name case name in nmod in removes name from the target context that named by all but the terminal atomic root ROOT context case context from det context the compound context target dep context that acl that named case all by nmod by named all cc all but det atomic the amod atomic terminal nmod by named atomic conj but all atomic part of name root ROOT part case name of nmod of part name p this method is idempotent it succeeds even if the terminal atomic root ROOT idempotent det method this nsubj idempotent method cop idempotent is nsubj succeeds it ccomp idempotent succeeds advmod atomic even mark atomic if det atomic the amod atomic terminal advcl if succeeds atomic this method is idempotent it succeeds even if the terminal atomic root ROOT idempotent det method this nsubj idempotent method cop idempotent is nsubj succeeds it ccomp idempotent succeeds advmod atomic even mark atomic if det atomic the amod atomic terminal advcl if succeeds atomic name is not bound in the target context but throws root ROOT bound nsubjpass bound name nsubj throws name auxpass bound is neg bound not case context in det context the compound context target nmod in bound context cc bound but conj but bound throws name not found exception if any of the intermediate contexts do not exist root ROOT found nsubj found name neg found not dobj found exception mark exist if nsubj exist any case contexts of det contexts the amod contexts intermediate nmod of any contexts aux exist do neg exist not advcl if found exist param name the name to bind may not be empty root ROOT empty compound name param dobj empty name det name the nsubj empty name mark bind to acl to name bind aux empty may neg empty not cop empty be exception name not found exception if an intermediate context does not root ROOT found compound name exception nsubj found name neg found not dobj found exception dep found if det context an amod context intermediate dep if context dep context does neg does not exist exception naming exception if a naming exception is encountered root ROOT exception compound exception exception compound exception naming mark encountered if det exception a amod exception naming nsubjpass encountered exception auxpass encountered is dep exception encountered override public void unbind name name throws naming exception root ROOT naming dobj naming exception all any ANTONYM ANTONYM all part ANTONYM ANTONYM be naming ANTONYM ANTONYM bind unbind ANTONYM ANTONYM bound even ANTONYM ANTONYM do naming ANTONYM ANTONYM does naming ANTONYM ANTONYM is naming ANTONYM ANTONYM is succeeds ANTONYM ANTONYM name be ANTONYM ANTONYM name do ANTONYM ANTONYM name does ANTONYM ANTONYM name is ANTONYM ANTONYM name throws ANTONYM ANTONYM named be ANTONYM ANTONYM named do ANTONYM ANTONYM named does ANTONYM ANTONYM named is ANTONYM ANTONYM named throws ANTONYM ANTONYM succeeds be ANTONYM ANTONYM terminal intermediate ANTONYM ANTONYM throws bind ANTONYM ANTONYM throws do ANTONYM ANTONYM throws does ANTONYM ANTONYM throws naming ANTONYM ANTONYM unbinds bind ANTONYM ANTONYM
