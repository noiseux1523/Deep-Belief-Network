LAPD;Problematic
public string NN get VB class NN path NN public string get class path root ROOT get compound path class dobj get path;0
void set VBN score NN float score NN void set score root ROOT set dobj set score float score;0
public float get VB score NN public float get score root ROOT get dobj get score;0
param frag fragment to be merged into this one public void merge VB text NN fragment NN frag NN param frag fragment to be merged into this one root ROOT fragment compound fragment param compound fragment frag mark merged to auxpass merged be acl to fragment merged case one into det one this nmod into merged one public void merge text fragment root ROOT fragment compound fragment text frag merged one SYNONYM SYNONYM;0
return the fragment sequence number public int get VB frag NN num NN return the fragment sequence number root ROOT return det number the compound number fragment compound number sequence dobj return number public int get frag num root ROOT get compound num frag dobj get num return number ANTONYM ANTONYM;0
private list NN position NN span NN position NN spans NNS new array NN list NN private list position span root ROOT span compound span position position spans root ROOT spans compound spans position new array list root ROOT list compound list array;0
public weighted JJ span NN term NN float weight NN string NN term NN boolean position NN sensitive JJ public weighted span term root ROOT term amod term weighted compound term span float weight string term boolean position sensitive root ROOT sensitive nmod npmod sensitive position;0
checks to see if this term is valid at code position code param position to check against valid term positions return true iff this term is a hit at this position public boolean check NN position NN int position NN checks to see if this term is valid at code position code root ROOT checks mark see to acl to checks see mark valid if det term this nsubj valid term cop valid is advcl if see valid case code at compound code code compound code position nmod at valid code param position root ROOT position compound position param to check against valid term positions root ROOT check mark check to case positions against amod positions valid compound positions term nmod against check positions return true iff this term is a hit at this position root ROOT hit compound term return amod term true advmod term iff det term this nsubj hit term cop hit is det hit a case position at det position this nmod at hit position public boolean check position root ROOT position compound position check int position check hit ANTONYM ANTONYM check return ANTONYM ANTONYM checks hit ANTONYM ANTONYM checks return ANTONYM ANTONYM see hit ANTONYM ANTONYM;0
public boolean is VBZ position NN sensitive JJ public boolean is position sensitive root ROOT sensitive cop sensitive is nmod npmod sensitive position;0
public void set VBN position NN sensitive JJ boolean position NN sensitive JJ public void set position sensitive root ROOT set nmod npmod sensitive position xcomp set sensitive boolean position sensitive root ROOT sensitive nmod npmod sensitive position;0
public list NN position NN span NN get VB position NN spans NNS public list position span root ROOT span compound span position get position spans root ROOT get compound spans position dobj get spans;0
returns NNS the DT total NN number NN of IN tokens NNS for this field NN see terms get sum total term freq public final long sum NN total JJ term NN freq NN returns the total number of tokens for this field see terms get sum total term freq root ROOT see nsubj get terms ccomp see get compound freq sum amod freq total compound freq term dobj get freq public final long sum total term freq root ROOT freq compound freq sum amod freq total compound freq term returns number ANTONYM ANTONYM total final ANTONYM ANTONYM;0
returns NNS the DT total NN number NN of IN postings NNS for this field NN see terms get sum doc freq public final long sum NN doc NN freq NN returns the total number of postings for this field see terms get sum doc freq root ROOT see nsubj get terms ccomp see get compound freq sum compound freq doc dobj get freq public final long sum doc freq root ROOT freq compound freq sum compound freq doc returns number ANTONYM ANTONYM total final ANTONYM ANTONYM;0
private final disi NN priority NN queue NN sub NN scorers NNS private final disi priority queue root ROOT queue compound queue disi compound queue priority sub scorers root ROOT scorers compound scorers sub;0
public int compare VB bottom NN int doc NN throws io NN exception NN public int compare bottom root ROOT compare dobj compare bottom int doc throws io exception root ROOT exception compound exception io;0
public void set VBN bottom NN final int bottom NN public void set bottom root ROOT set dobj set bottom final int bottom;0
public term NN get VB term NN public term get term root ROOT get dobj get term;0
public mutable JJ value NN duplicate VB public mutable value root ROOT value amod value mutable duplicate;0
public static double to TO degrees NNS final double radians NNS public static double to degrees root ROOT degrees case degrees to final double radians;0
This method NN returns NNS the DT internal JJ heap NN array NN as IN object NN protected final object NN get VB heap NN array NN This method returns the internal heap array as object protected final object get heap array root ROOT get compound array heap dobj get array;0
public void set VBN max NN int limit NN public void set max root ROOT set dobj set max int limit;0
public static final storage NN level NN none NN create VB false JJ false JJ false JJ false JJ public static final storage level root ROOT level compound level storage none create false false false false;0
public static final storage NN level NN memory NN only RB create VB false JJ true JJ false JJ true JJ public static final storage level root ROOT level compound level storage memory only root ROOT memory advmod memory only create false true false true false true ANTONYM ANTONYM;0
public static storage NN level NN create VB boolean use NN disk NN boolean use NN memory NN boolean use VB off RP heap NN boolean deserialized VBN int replication NN public static storage level root ROOT level compound level storage create boolean use disk root ROOT disk compound disk use boolean use memory root ROOT memory compound memory use boolean use off heap root ROOT use compound prt use off dobj use heap boolean deserialized int replication;0
public int compare VB long b NN long a DT public int compare long b long a;0
public int compare VB long a DT prefix NN long b NN prefix NN public int compare long a prefix root ROOT prefix det prefix a long b prefix root ROOT prefix compound prefix b;0
private final long num NN elements NNS for IN spill NN threshold NN private final long num elements for spill threshold root ROOT elements compound elements num case threshold for compound threshold spill nmod for elements threshold;0
private final linked VBN list NN memory NN block NN allocated VBN pages NNS new linked VBN list NN private final linked list root ROOT list amod list linked memory block root ROOT block compound block memory allocated pages root ROOT pages amod pages allocated new linked list root ROOT list amod list linked;0
private final linked VBN list NN unsafe JJ sorter NN spill NN writer NN spill NN writers NNS new linked VBN list NN private final linked list root ROOT list amod list linked unsafe sorter spill writer root ROOT writer amod writer unsafe compound writer sorter compound writer spill spill writers root ROOT writers compound writers spill new linked list root ROOT list amod list linked;0
return the total number of bytes that has been spilled into disk so far public long get VB spill NN size NN return the total number of bytes that has been spilled into disk so far root ROOT return det number the amod number total dobj return number case bytes of nmod of number bytes nsubjpass spilled bytes ref bytes that aux spilled has auxpass spilled been acl relcl bytes spilled case disk into nmod into spilled disk advmod far so advmod spilled far public long get spill size root ROOT get compound size spill dobj get size return has ANTONYM ANTONYM return number ANTONYM ANTONYM;0
public string NN is VBZ el NN ignored VBN public string is el ignored root ROOT ignored auxpass ignored is nsubjpass ignored el;1
private void check NN popup NN mouse NN event NN e SYM private void check popup root ROOT popup compound popup check mouse event root ROOT event compound event mouse e;1
protected void has VBZ property NN properties NNS properties NNS string NN name NN protected void has property root ROOT has dobj has property properties properties string name;1
public string NN is VBZ dependency NN resolution NN required VBN public string is dependency resolution required root ROOT required auxpass required is compound resolution dependency nsubjpass required resolution;1
public void has VBZ should MD be VB false JJ for IN a DT new JJ array NN public void has should be false for a new array root ROOT false aux false has aux false should cop false be case array for det array a amod array new nmod for false array;1
returns a uuid unique for this member over all sessions if the member crashes and restarts the unique id will be different return byte public byte get VB unique JJ id NN returns a uuid unique for this member over all sessions root ROOT returns det unique a amod unique uuid dep returns unique case member for det member this nmod for unique member case sessions over det sessions all nmod over unique sessions if the member crashes and restarts the unique id will be different root ROOT different mark crashes if det member the nsubj crashes member nsubj restarts member csubj different crashes cc crashes and conj and crashes restarts csubj different restarts det id the amod id unique dobj restarts id aux different will cop different be return byte root ROOT byte compound byte return public byte get unique id root ROOT get amod id unique dobj get id all over ANTONYM ANTONYM unique different SYNONYM SYNONYM;1
public byte get VB command NN public byte get command root ROOT get dobj get command;1
protected transient byte map NN context NN name NN protected transient byte map context name root ROOT name compound name map compound name context;1
private static final list NN string NN empty JJ string NN collections NNS empty JJ list NN private static final list string empty string root ROOT string amod string empty collections empty list root ROOT list compound list collections amod list empty;1
public push NN builder NN set VBN header NN string NN name NN string NN value NN public push builder root ROOT builder compound builder push set header root ROOT set dobj set header string name string value;1